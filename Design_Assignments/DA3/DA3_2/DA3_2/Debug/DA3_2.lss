
DA3_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000201  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba7  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d1  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000142  00000142  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_11 00000024  00000108  00000108  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000003c  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  0000014c  0000014c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  0000012c  0000012c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_11>
  30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  48:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  68:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  6c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  70:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  74:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  78:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  7c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  80:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  84:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  88:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  8c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  90:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  94:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  98:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  9c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  a0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  a4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  a8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  ac:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  b0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <_etext>
  c4:	0c 94 96 00 	jmp	0x12c	; 0x12c <exit>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>

Disassembly of section .text:

00000142 <__bad_interrupt>:
 142:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_11:

00000108 <__vector_11>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER1_COMPA_vect)                // TIMER1 ISR CTC MODE
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	PORTB ^= 0X10;                    // TOGGLE  PORTB4
 116:	95 b1       	in	r25, 0x05	; 5
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	89 27       	eor	r24, r25
 11c:	85 b9       	out	0x05, r24	; 5
}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

Disassembly of section .text.main:

000000cc <main>:


int main(void)
{
	DDRB |= 0x10;                    // PB4 AS OUTPUT
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= 0X00;                    // SET TCCR1A REGISTER TO 0
  d2:	e0 e8       	ldi	r30, 0x80	; 128
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 83       	st	Z, r24
	TCCR1B |= 0X0D;                    // SET TIMER1 TO CTC MODE & PRESCALE 1024
  da:	e1 e8       	ldi	r30, 0x81	; 129
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8d 60       	ori	r24, 0x0D	; 13
  e2:	80 83       	st	Z, r24
	OCR1A = 49152;                    // INITIALIZE COMPARE VALUE
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 ec       	ldi	r25, 0xC0	; 192
  e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= 0X02;                    //ENABLE TIMER/COUNTER 1 OUTPUT COMPARE A MATCH INTERRUPT
  f0:	ef e6       	ldi	r30, 0x6F	; 111
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
	sei();                            // ENABLE GLOBAL INTERRUPT
  fa:	78 94       	sei
	while(1)
	{
		if(TIFR1 & (1 << TOV1))        // CHECK IF TIMER 1 OVERFLAG IS 1
  fc:	b0 9b       	sbis	0x16, 0	; 22
  fe:	fe cf       	rjmp	.-4      	; 0xfc <main+0x30>
		TIFR1 |= (1 << TOV1);    // CLEAR OVERFLOW FLAG
 100:	86 b3       	in	r24, 0x16	; 22
 102:	81 60       	ori	r24, 0x01	; 1
 104:	86 bb       	out	0x16, r24	; 22
 106:	fa cf       	rjmp	.-12     	; 0xfc <main+0x30>

Disassembly of section .text.__dummy_fini:

0000014a <_fini>:
 14a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000014c <__funcs_on_exit>:
 14c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000014e <__simulator_exit>:
 14e:	08 95       	ret

Disassembly of section .text.exit:

0000012c <exit>:
 12c:	ec 01       	movw	r28, r24
 12e:	0e 94 a6 00 	call	0x14c	; 0x14c <__funcs_on_exit>
 132:	0e 94 a5 00 	call	0x14a	; 0x14a <_fini>
 136:	ce 01       	movw	r24, r28
 138:	0e 94 a7 00 	call	0x14e	; 0x14e <__simulator_exit>
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 a3 00 	call	0x146	; 0x146 <_Exit>

Disassembly of section .text._Exit:

00000146 <_Exit>:
 146:	0e 94 64 00 	call	0xc8	; 0xc8 <_exit>

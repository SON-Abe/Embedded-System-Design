
DA3_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001cd  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba0  00000000  00000000  000001fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c8  00000000  00000000  00000d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000011c  0000011c  00000190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000003a  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  00000124  00000124  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  00000126  00000126  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  00000106  00000106  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  00000120  00000120  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
   8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
   c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  10:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  18:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  1c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  20:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  24:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  30:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  38:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  3c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  40:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  44:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  48:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  4c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  50:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  54:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  58:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  5c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  60:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  68:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  6c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  70:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  74:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  7c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  80:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  84:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  8c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  90:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  94:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  98:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  9c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  a0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  a4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  a8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  ac:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  b0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <_etext>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <exit>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>

Disassembly of section .text:

0000011c <__bad_interrupt>:
 11c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000cc <main>:
#include<util/delay.h>

int main(void)
{
	int counter = 0;                    // INITIALIZE COUNTER
	DDRB |= 0X20;                        // SET PB5 AS AN OUTPUT
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	84 b9       	out	0x04, r24	; 4
	TCCR0A = 0X00;                        // NORMAL OPERATION
  d2:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 231;                        // TIMER COUNTER 0 SET TO 0 ->  231
  d4:	87 ee       	ldi	r24, 0xE7	; 231
  d6:	86 bd       	out	0x26, r24	; 38
	TCCR0B |= 0X03;                        // PRSCALE 64
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	83 60       	ori	r24, 0x03	; 3
  dc:	85 bd       	out	0x25, r24	; 37
#include<avr/io.h>
#include<util/delay.h>

int main(void)
{
	int counter = 0;                    // INITIALIZE COUNTER
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
	TCCR0A = 0X00;                        // NORMAL OPERATION
	TCNT0 = 231;                        // TIMER COUNTER 0 SET TO 0 ->  231
	TCCR0B |= 0X03;                        // PRSCALE 64
	while(1)
	{
		while((TIFR0 & 0X01) == 0);        // WAIT FOR THE OVERFLOW EVENT
  e2:	a8 9b       	sbis	0x15, 0	; 21
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x16>
		if(counter == 10000)            // WHEN COUNTER REACHES 1 SECOND
  e6:	80 31       	cpi	r24, 0x10	; 16
  e8:	27 e2       	ldi	r18, 0x27	; 39
  ea:	92 07       	cpc	r25, r18
  ec:	31 f4       	brne	.+12     	; 0xfa <main+0x2e>
		{
			PORTB ^= (1 << DDB5);            // TOGGLE PORTB LED
  ee:	95 b1       	in	r25, 0x05	; 5
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	89 27       	eor	r24, r25
  f4:	85 b9       	out	0x05, r24	; 5
			counter = 0;                // RESET COUNTER
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
		}
		counter ++;                        // INCREMENT COUNTER
  fa:	01 96       	adiw	r24, 0x01	; 1
		TCNT0 = 231;                    // RESET TCNT0
  fc:	27 ee       	ldi	r18, 0xE7	; 231
  fe:	26 bd       	out	0x26, r18	; 38
		TIFR0 = 0X01;                    // CLEAR FLAG OVERFLOW
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	25 bb       	out	0x15, r18	; 21
	}
 104:	ee cf       	rjmp	.-36     	; 0xe2 <main+0x16>

Disassembly of section .text.__dummy_fini:

00000124 <_fini>:
 124:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000126 <__funcs_on_exit>:
 126:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000128 <__simulator_exit>:
 128:	08 95       	ret

Disassembly of section .text.exit:

00000106 <exit>:
 106:	ec 01       	movw	r28, r24
 108:	0e 94 93 00 	call	0x126	; 0x126 <__funcs_on_exit>
 10c:	0e 94 92 00 	call	0x124	; 0x124 <_fini>
 110:	ce 01       	movw	r24, r28
 112:	0e 94 94 00 	call	0x128	; 0x128 <__simulator_exit>
 116:	ce 01       	movw	r24, r28
 118:	0e 94 90 00 	call	0x120	; 0x120 <_Exit>

Disassembly of section .text._Exit:

00000120 <_Exit>:
 120:	0e 94 64 00 	call	0xc8	; 0xc8 <_exit>

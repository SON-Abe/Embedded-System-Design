
DA3_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000269  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000277  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc0  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e2  00000000  00000000  00000e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027a  00000000  00000000  00001741  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000198  00000198  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_9 00000048  0000010e  0000010e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000002c  00000156  00000156  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.counter.1635 00000002  00800100  00800100  0000023a  2**0
                  ALLOC
 17 .text.__dummy_fini 00000002  000001a0  000001a0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000001a2  000001a2  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000001a4  000001a4  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000182  00000182  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000019c  0000019c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
   8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
   c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <_etext>
  28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  40:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  48:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  4c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  54:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  58:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  5c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  60:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  64:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  68:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  6c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  70:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  74:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  7c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  80:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  84:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  88:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  8c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  90:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  94:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  98:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  9c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  a0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  a4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  a8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  ac:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  b0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>

000000b4 <.dinit>:
  b4:	01 00       	.word	0x0001	; ????
  b6:	01 02       	muls	r16, r17
  b8:	80 00       	.word	0x0080	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	17 c0       	rjmp	.+46     	; 0xfc <__do_clear_bss+0x8>
  ce:	b5 91       	lpm	r27, Z+
  d0:	a5 91       	lpm	r26, Z+
  d2:	35 91       	lpm	r19, Z+
  d4:	25 91       	lpm	r18, Z+
  d6:	05 91       	lpm	r16, Z+
  d8:	07 fd       	sbrc	r16, 7
  da:	0c c0       	rjmp	.+24     	; 0xf4 <__do_clear_bss>
  dc:	95 91       	lpm	r25, Z+
  de:	85 91       	lpm	r24, Z+
  e0:	ef 01       	movw	r28, r30
  e2:	f9 2f       	mov	r31, r25
  e4:	e8 2f       	mov	r30, r24
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0x20>
  f0:	fe 01       	movw	r30, r28
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_clear_bss+0x8>

000000f4 <__do_clear_bss>:
  f4:	1d 92       	st	X+, r1
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__do_clear_bss>
  fc:	e9 3b       	cpi	r30, 0xB9	; 185
  fe:	f4 07       	cpc	r31, r20
 100:	31 f7       	brne	.-52     	; 0xce <__do_copy_data+0x8>
 102:	0e 94 ab 00 	call	0x156	; 0x156 <main>
 106:	0c 94 c1 00 	jmp	0x182	; 0x182 <exit>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

Disassembly of section .text:

00000198 <__bad_interrupt>:
 198:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_9:

0000010e <__vector_9>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER2_OVF_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
	static uint16_t counter = 0;    // STATIC COUNTER HOLDS VALUE BETWEEN ISR
	counter++;                        // INCREMENT COUNTER
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(counter == 2000)                // IF COUNTER REACHES 2 SECONDS
 130:	80 3d       	cpi	r24, 0xD0	; 208
 132:	97 40       	sbci	r25, 0x07	; 7
 134:	41 f4       	brne	.+16     	; 0x146 <__vector_9+0x38>
	{
		PORTB ^= 0x08;                // TOGGLE PORTB LED
 136:	95 b1       	in	r25, 0x05	; 5
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	89 27       	eor	r24, r25
 13c:	85 b9       	out	0x05, r24	; 5
		counter = 0;                //RESET COUNTER
 13e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

Disassembly of section .text.main:

00000156 <main>:

int main(void)
{
	DDRB |= 0X08;                    // PB3 IS AN OUTPUT
 156:	84 b1       	in	r24, 0x04	; 4
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	84 b9       	out	0x04, r24	; 4
	TCCR2A |= 0X00;                    // SET REGISTER TCCR2A
 15c:	e0 eb       	ldi	r30, 0xB0	; 176
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 83       	st	Z, r24
	TCCR2B |= 0X04;                    // SET PRESCALAR TO 64 AND STARTS PWM
 164:	e1 eb       	ldi	r30, 0xB1	; 177
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	80 83       	st	Z, r24
	TIMSK2 |= 0X01;                    // SET INTERRUPT ON OVERFLOW IN TIMER/COUNTER 2
 16e:	e0 e7       	ldi	r30, 0x70	; 112
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 83       	st	Z, r24
	TCNT2 = 192;                    //  TIMER COUNTER 0 SET TO 0 ->  192
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	sei();                            // ENABLE GLOBAL INTERRUPTS
 17e:	78 94       	sei
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0x2a>

Disassembly of section .text.__dummy_fini:

000001a0 <_fini>:
 1a0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001a2 <__funcs_on_exit>:
 1a2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001a4 <__simulator_exit>:
 1a4:	08 95       	ret

Disassembly of section .text.exit:

00000182 <exit>:
 182:	ec 01       	movw	r28, r24
 184:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__funcs_on_exit>
 188:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_fini>
 18c:	ce 01       	movw	r24, r28
 18e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__simulator_exit>
 192:	ce 01       	movw	r24, r28
 194:	0e 94 ce 00 	call	0x19c	; 0x19c <_Exit>

Disassembly of section .text._Exit:

0000019c <_Exit>:
 19c:	0e 94 85 00 	call	0x10a	; 0x10a <_exit>


DA2_2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001e1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c70  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000958  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000004e  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  00000138  00000138  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  0000013a  0000013a  000001ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  0000011a  0000011a  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  00000134  00000134  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  10:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  14:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  18:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  20:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  28:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  30:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  38:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  44:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  4c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  50:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  54:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  58:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  5c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  60:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  68:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  6c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  70:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  7c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  80:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  84:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  8c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  90:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  94:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  98:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  9c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  a0:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  a4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  a8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  ac:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  b0:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <_etext>
  c4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <exit>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>

Disassembly of section .text:

00000130 <__bad_interrupt>:
 130:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000cc <main>:
#include <avr/io.h>             //AVR io header file
#include <util/delay.h>         //delay header file

int main(void)                  //main
{
	DDRB |= (1<<5);             //set PB5 as output
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<5);           //set PB5 to '0'
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	85 b9       	out	0x05, r24	; 5
	DDRC &= ~(1<<2);            //set PC2 as input
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<2);            //enable pull-up resistor
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	88 b9       	out	0x08, r24	; 8
	while(1)                    //forever loop
	{
		if (!(PINC & (1<<2)))   //if PC2 is GND
  e4:	32 99       	sbic	0x06, 2	; 6
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x18>
		{
			PORTB |= (1<<5);    //turn on PB5
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	87 ea       	ldi	r24, 0xA7	; 167
  f2:	91 e6       	ldi	r25, 0x61	; 97
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x28>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x32>
  fe:	00 00       	nop
			_delay_ms(2000);    //for 2000ms
			PORTB &= ~(1<<5);   //turn off PB5
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	85 b9       	out	0x05, r24	; 5
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	87 ea       	ldi	r24, 0xA7	; 167
 10a:	91 e6       	ldi	r25, 0x61	; 97
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x40>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x4a>
 116:	00 00       	nop
 118:	e5 cf       	rjmp	.-54     	; 0xe4 <main+0x18>

Disassembly of section .text.__dummy_fini:

00000138 <_fini>:
 138:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000013a <__funcs_on_exit>:
 13a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000013c <__simulator_exit>:
 13c:	08 95       	ret

Disassembly of section .text.exit:

0000011a <exit>:
 11a:	ec 01       	movw	r28, r24
 11c:	0e 94 9d 00 	call	0x13a	; 0x13a <__funcs_on_exit>
 120:	0e 94 9c 00 	call	0x138	; 0x138 <_fini>
 124:	ce 01       	movw	r24, r28
 126:	0e 94 9e 00 	call	0x13c	; 0x13c <__simulator_exit>
 12a:	ce 01       	movw	r24, r28
 12c:	0e 94 9a 00 	call	0x134	; 0x134 <_Exit>

Disassembly of section .text._Exit:

00000134 <_Exit>:
 134:	0e 94 64 00 	call	0xc8	; 0xc8 <_exit>

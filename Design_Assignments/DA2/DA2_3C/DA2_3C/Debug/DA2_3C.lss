
DA2_3C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c56  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000946  00000000  00000000  00000e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bf  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000140  00000140  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 00000038  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000026  00000104  00000104  00000178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000148  00000148  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  0000014c  0000014c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  0000012a  0000012a  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  00000144  00000144  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <_etext>
   c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  54:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  5c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  68:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  6c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  70:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  74:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  7c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  80:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  84:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  88:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  8c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  90:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  94:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  98:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  9c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  a0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  a4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  a8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  ac:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  b0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 82 00 	call	0x104	; 0x104 <main>
  c4:	0c 94 95 00 	jmp	0x12a	; 0x12a <exit>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>

Disassembly of section .text:

00000140 <__bad_interrupt>:
 140:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

000000cc <__vector_2>:
#include <avr/io.h>							//AVR io header file
#include <util/delay.h>						//delay header file
#include <avr/interrupt.h>					//interrupt header file

ISR(INT1_vect) 								//interrupt subroutine for INT1_vect
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	PORTB &= ~(1 << 4); 					//turn off PB4
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	8f 7e       	andi	r24, 0xEF	; 239
  e0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	8d e3       	ldi	r24, 0x3D	; 61
  e6:	99 e4       	ldi	r25, 0x49	; 73
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <__vector_2+0x1c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__vector_2+0x26>
  f2:	00 00       	nop
	_delay_ms(3000);						//delay for 3000ms
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

Disassembly of section .text.main:

00000104 <main>:

int main(void)								//main code
{
	DDRB |= (1 << 4);  						//set PB4 as output
 104:	84 b1       	in	r24, 0x04	; 4
 106:	80 61       	ori	r24, 0x10	; 16
 108:	84 b9       	out	0x04, r24	; 4
	PORTD |= (1 << 3); 						//enable pull-up resistor for PD3
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	8b b9       	out	0x0b, r24	; 11

	EICRA |= (1 << ISC11) | (1 << ISC10); 	//rising edge trigger
 110:	e9 e6       	ldi	r30, 0x69	; 105
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8c 60       	ori	r24, 0x0C	; 12
 118:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);                 	//enable INT1
 11a:	8d b3       	in	r24, 0x1d	; 29
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	8d bb       	out	0x1d, r24	; 29
	sei();                                 	//enable global interrupts
 120:	78 94       	sei

	while (1)								//forever loop
	{
		PORTB |= (1 << 4);					//turn on PB4
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 61       	ori	r24, 0x10	; 16
 126:	85 b9       	out	0x05, r24	; 5
 128:	fc cf       	rjmp	.-8      	; 0x122 <main+0x1e>

Disassembly of section .text.__dummy_fini:

00000148 <_fini>:
 148:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000014a <__funcs_on_exit>:
 14a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000014c <__simulator_exit>:
 14c:	08 95       	ret

Disassembly of section .text.exit:

0000012a <exit>:
 12a:	ec 01       	movw	r28, r24
 12c:	0e 94 a5 00 	call	0x14a	; 0x14a <__funcs_on_exit>
 130:	0e 94 a4 00 	call	0x148	; 0x148 <_fini>
 134:	ce 01       	movw	r24, r28
 136:	0e 94 a6 00 	call	0x14c	; 0x14c <__simulator_exit>
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 a2 00 	call	0x144	; 0x144 <_Exit>

Disassembly of section .text._Exit:

00000144 <_Exit>:
 144:	0e 94 64 00 	call	0xc8	; 0xc8 <_exit>

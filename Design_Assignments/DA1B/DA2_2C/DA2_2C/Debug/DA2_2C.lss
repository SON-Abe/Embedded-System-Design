
DA2_2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001c7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c36  00000000  00000000  000001f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092c  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  00001757  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000116  00000116  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000034  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  0000011e  0000011e  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  00000120  00000120  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  00000122  00000122  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  0000011a  0000011a  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <_etext>
  c4:	0c 94 80 00 	jmp	0x100	; 0x100 <exit>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>

Disassembly of section .text:

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000cc <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB |= (1<<5)|(1<<4);
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	80 63       	ori	r24, 0x30	; 48
  d0:	84 b9       	out	0x04, r24	; 4
	DDRC &= (0<<2);
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<2);
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	88 b9       	out	0x08, r24	; 8
	while(1)
	{
		if (!(PINC & (1<<2)))
  dc:	32 99       	sbic	0x06, 2	; 6
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x10>
		{
			PORTB |= (1<<5);
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	87 ea       	ldi	r24, 0xA7	; 167
  ea:	91 e6       	ldi	r25, 0x61	; 97
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x20>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x2a>
  f6:	00 00       	nop
			_delay_ms(2000);
			PORTB &= ~(1<<5);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	ee cf       	rjmp	.-36     	; 0xdc <main+0x10>

Disassembly of section .text.__dummy_fini:

0000011e <_fini>:
 11e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000120 <__funcs_on_exit>:
 120:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000122 <__simulator_exit>:
 122:	08 95       	ret

Disassembly of section .text.exit:

00000100 <exit>:
 100:	ec 01       	movw	r28, r24
 102:	0e 94 90 00 	call	0x120	; 0x120 <__funcs_on_exit>
 106:	0e 94 8f 00 	call	0x11e	; 0x11e <_fini>
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 91 00 	call	0x122	; 0x122 <__simulator_exit>
 110:	ce 01       	movw	r24, r28
 112:	0e 94 8d 00 	call	0x11a	; 0x11a <_Exit>

Disassembly of section .text._Exit:

0000011a <_Exit>:
 11a:	0e 94 64 00 	call	0xc8	; 0xc8 <_exit>
